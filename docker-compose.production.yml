version: '3.8'

services:
  # Database with proper configuration
  postgres:
    image: postgres:15-alpine
    container_name: i4ops-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-i4ops}
      POSTGRES_USER: ${POSTGRES_USER:-i4ops}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/prisma/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-i4ops} -d ${POSTGRES_DB:-i4ops}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    sysctls:
      # Optimize for high-frequency inserts
      - net.core.somaxconn=1024
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=ddl
      -c log_checkpoints=on
      -c log_lock_waits=on
      -c log_temp_files=0

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: i4ops-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000

  # Main application server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: i4ops-server
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-i4ops}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-i4ops}
      REDIS_URL: redis://redis:6379
      PORT: 3000
      # Security log configuration
      SECURITY_LOG_DIR: ${SECURITY_LOG_DIR:-/mnt/vm-security}
      SECURITY_LOG_SSH_HOST: ${SECURITY_LOG_SSH_HOST}
      SECURITY_LOG_SSH_USER: ${SECURITY_LOG_SSH_USER}
      SECURITY_LOG_SSH_KEY: ${SECURITY_LOG_SSH_KEY}
      # Monitoring
      ENABLE_METRICS: "true"
      LOG_LEVEL: ${LOG_LEVEL:-info}
      # Health check intervals
      HEALTH_CHECK_INTERVAL: 30000
      LOG_PARSER_POLL_INTERVAL: 10000
      # Performance tuning
      UV_THREADPOOL_SIZE: 16
      NODE_OPTIONS: "--max-old-space-size=2048"
    volumes:
      - security_logs:/mnt/vm-security:ro
      - server_logs:/app/logs
      - log_positions:/app/data
      - ./server/uploads:/app/uploads
    ports:
      - "127.0.0.1:3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Frontend application
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
      target: production
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    container_name: i4ops-dashboard
    restart: unless-stopped
    depends_on:
      server:
        condition: service_healthy
    ports:
      - "127.0.0.1:8080:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx:noexec,nosuid,size=50m
      - /var/run:noexec,nosuid,size=10m

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: i4ops-nginx
    restart: unless-stopped
    depends_on:
      - dashboard
      - server
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true

  # Log aggregation and monitoring
  promtail:
    image: grafana/promtail:latest
    container_name: i4ops-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - server_logs:/var/log/server:ro
      - nginx_logs:/var/log/nginx:ro
      - security_logs:/var/log/security:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - server
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Metrics collection (optional but recommended)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: i4ops-node-exporter
    restart: unless-stopped
    pid: host
    network_mode: host
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  security_logs:
    driver: local
    driver_opts:
      type: none
      device: ${SECURITY_LOG_HOST_PATH:-/opt/i4ops/logs}
      o: bind
  server_logs:
    driver: local
  nginx_logs:
    driver: local
  log_positions:
    driver: local

networks:
  default:
    name: i4ops-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 