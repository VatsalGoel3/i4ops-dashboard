generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PollHistory {
  id   Int      @id @default(autoincrement())
  time DateTime @default(now())
  up   Int
  down Int
}

model Host {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  ip            String
  os            String
  uptime        Int
  ssh           Boolean
  cpu           Float
  ram           Float
  disk          Float
  assignedTo    String?
  notes         String?
  updatedAt     DateTime      @default(now()) @updatedAt
  status        HostStatus    @default(up)
  pipelineStage PipelineStage @default(Unassigned)
  vms           VM[]
}

model VM {
  id        Int      @id @default(autoincrement())
  name      String
  cpu       Float
  ram       Float
  disk      Float
  os        String
  uptime    Int
  hostId    Int
  updatedAt DateTime @default(now()) @updatedAt
  status    VMStatus @default(offline)
  machineId String   @unique
  ip        String
  host      Host     @relation(fields: [hostId], references: [id])
  securityEvents SecurityEvent[]
}

model AuditLog {
  id       Int      @id @default(autoincrement())
  entity   String
  entityId Int
  action   String
  field    String
  oldValue String?
  newValue String?
  user     String
  time     DateTime @default(now())
}

model SecurityEvent {
  id        Int              @id @default(autoincrement())
  vmId      Int
  timestamp DateTime
  source    String           // auth.log, kern.log, syslog
  message   String
  severity  SecuritySeverity
  rule      SecurityRule
  ackAt     DateTime?
  createdAt DateTime         @default(now())
  
  vm        VM               @relation(fields: [vmId], references: [id], onDelete: Cascade)
  
  @@index([vmId])
  @@index([timestamp(sort: Desc)])
  @@index([severity])
  @@index([ackAt])
}

enum HostStatus {
  up
  down
}

enum VMStatus {
  running
  stopped
  offline
}

enum PipelineStage {
  Active
  Broken
  Installing
  Reserved
  Unassigned
}

enum SecuritySeverity {
  critical
  high
  medium
  low
}

enum SecurityRule {
  egress
  brute_force
  sudo
  oom_kill
  other
}
