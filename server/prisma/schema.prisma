generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum HostStatus {
  up
  down
}

enum VMStatus {
  running
  stopped
  offline
}

enum PipelineStage {
  active
  installing
  broken
  reserved
  unassigned
}

enum SecurityEventType {
  egress_attempt
  file_access
  authentication_failure
  suspicious_behavior
  kernel_alert
  system_alert
}

enum SecurityEventSeverity {
  low
  medium
  high
  critical
}

model PollHistory {
  id   Int      @id @default(autoincrement())
  time DateTime @default(now())
  up   Int
  down Int
}

model Host {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  ip            String
  os            String
  uptime        Int
  status        HostStatus     @default(up)
  ssh           Boolean
  cpu           Float
  ram           Float
  disk          Float

  pipelineStage PipelineStage  @default(unassigned)
  assignedTo    String?
  notes         String?
  updatedAt     DateTime       @default(now()) @updatedAt

  vms           VM[]
}

model VM {
  id         Int      @id @default(autoincrement())
  name       String
  machineId  String   @unique  // remove `?`
  os         String
  ip         String
  cpu        Float
  ram        Float
  disk       Float
  uptime     Int
  status     VMStatus @default(offline)
  updatedAt  DateTime @default(now()) @updatedAt

  hostId     Int
  host       Host     @relation(fields: [hostId], references: [id])
}

model AuditLog {
  id       Int      @id @default(autoincrement())
  entity   String
  entityId Int
  action   String
  field    String
  oldValue String?
  newValue String?
  user     String
  time     DateTime @default(now())
}

model SecurityEvent {
  id          Int                   @id @default(autoincrement())
  vmName      String                // VM name (e.g., "u2-vm30000")
  hostName    String                // Host name (e.g., "u2")
  logType     String                // "auth.log", "kern.log", "syslog"
  eventType   SecurityEventType
  severity    SecurityEventSeverity @default(medium)
  timestamp   DateTime
  rawLine     String                // Original log line
  parsedData  Json?                 // Structured parsed data
  sourceFile  String                // Full path to source file
  createdAt   DateTime              @default(now())

  @@index([vmName])
  @@index([timestamp])
  @@index([eventType])
  @@index([severity])
}